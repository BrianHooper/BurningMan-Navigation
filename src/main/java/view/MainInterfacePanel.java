package view;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.util.TreeMap;

/**
 * Class MainInterfacePanel
 * <p>
 * Bound class for GUI form
 *
 * @author Brian Hooper
 * @since 0.9.0
 */
class MainInterfacePanel {
//**********************
// Class member fields
//**********************

    // Main Panel
    private JPanel mainPanel;

    // JComponent fields generated by GUI form
    private JTextField currentAddress;
    private JTextField bathroomAddress;
    private JTextField bathroomDirections;
    private JTextField homeAddress;
    private JTextField homeDirections;
    private JTextField destinationName;
    private JTextField destinationAddress;
    private JTextField destinationDirections;
    private JPanel leftMenu;
    private JPanel leftMenuPanel;
    private JLabel nearestBathroomLabel;
    private JLabel homeCampLabel;
    private JLabel destinationLabel;
    private JPanel clockPanel;
    private JLabel clockLabel;
    private JLabel addressLabel;
    private JPanel rightPanel;
    private JPanel globalPanel;
    private JLabel header;
    private JTextField currentCoordinates;

    // main menu controller
    private Menu menu;

//**********************
// Constructors and initializers
//**********************

    /**
     * Builds custom UI components
     */
    private void createUIComponents() {
        leftMenuPanel = new JPanel();
        leftMenu = new JPanel();
        leftMenu.setLayout(new GridLayout(0, 1));

        leftMenuPanel.add(leftMenu);

        menu = new Menu();

        addressLabel = new JLabel("Current Address:");
        addressLabel.setBorder(new EmptyBorder(0, 0, 0, 0));

        nearestBathroomLabel = new JLabel("Nearest Bathroom: ");
        nearestBathroomLabel.setBorder(new EmptyBorder(5, 0, 0, 0));

        homeCampLabel = new JLabel("Home camp: ");
        homeCampLabel.setBorder(new EmptyBorder(5, 0, 0, 0));

        destinationLabel = new JLabel("Destination: ");
        destinationLabel.setBorder(new EmptyBorder(5, 0, 0, 0));

        clockPanel = new JPanel();
        clockLabel = new JLabel("Clock");
        clockLabel.setFont(new Font(View.standardFont.getFontName(), Font.PLAIN, 18));
        clockPanel.add(clockLabel);


        resetMenu();
    }

//**********************
// Getters and setters
//**********************

    /**
     * getter for Menu object
     *
     * @return menu
     */
    Menu getMenu() {
        return menu;
    }

    /**
     * Getter for mainPanel
     *
     * @return mainPanel
     */
    JPanel getMainPanel() {
        return mainPanel;
    }

    /**
     * Sets current address field
     *
     * @param fieldValue address
     */
    private void setCurrentAddress(String fieldValue) {
        this.currentAddress.setText(fieldValue);
    }

    /**
     * sets bathroom address field
     *
     * @param fieldValue address
     */
    private void setBathroomAddress(String fieldValue) {
        this.bathroomAddress.setText(fieldValue);
    }

    /**
     * sets bathroom directions field
     *
     * @param fieldValue directions
     */
    private void setBathroomDirections(String fieldValue) {
        this.bathroomDirections.setText(fieldValue);
    }

    /**
     * sets home address field
     *
     * @param fieldValue address
     */
    private void setHomeAddress(String fieldValue) {
        this.homeAddress.setText(fieldValue);
    }

    /**
     * sets home directions field
     *
     * @param fieldValue directions
     */
    private void setHomeDirections(String fieldValue) {
        this.homeDirections.setText(fieldValue);
    }

    /**
     * sets destination name field
     *
     * @param fieldValue destination
     */
    private void setDestinationName(String fieldValue) {
        this.destinationName.setText(fieldValue);
    }

    /**
     * sets destination address field
     *
     * @param fieldValue address
     */
    private void setDestinationAddress(String fieldValue) {
        this.destinationAddress.setText(fieldValue);
    }

    /**
     * sets destination directions field
     *
     * @param fieldValue directions
     */
    private void setDestinationDirections(String fieldValue) {
        this.destinationDirections.setText(fieldValue);
    }

    /**
     * Sets the clock value
     *
     * @param clockValue time string
     */
    void setClock(String clockValue) {
        this.clockLabel.setText(clockValue);
    }

    /**
     * Updates all navigation fields
     *
     * @param map TreeMap containing field name and field value
     */
    void setNavigation(TreeMap<String, String> map) {
        setCurrentAddress(map.get("currentAddress"));
        setBathroomAddress(map.get("bathroomAddress"));
        setBathroomDirections(map.get("bathroomDirections"));
        setHomeAddress(map.get("homeAddress"));
        setHomeDirections(map.get("homeDirections"));
        setDestinationName(map.get("destinationName"));
        setDestinationAddress(map.get("destinationAddress"));
        setDestinationDirections(map.get("destinationDirections"));
    }

    /**
     * Updates currentCoordinates panel with latitude and longitude
     *
     * @param latitude  latitude
     * @param longitude longitude
     */
    void setLocation(double latitude, double longitude) {
        currentCoordinates.setText(String.format(
                "%.4f", latitude) + ", " + String.format("%.4f", longitude));
    }

//**********************
// Class methods
//**********************

    /**
     * Reads and resets menu items
     */
    void resetMenu() {
        leftMenu.removeAll();
        MenuLabel[] menuLabels = menu.readMenu();
        if (menuLabels != null) {
            for (MenuLabel menuLabel : menuLabels) {
                leftMenu.add(menuLabel);
            }
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setMinimumSize(new Dimension(-1, -1));
        mainPanel.setName("mainPanel");
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.gridheight = 2;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(panel1, gbc);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        globalPanel = new JPanel();
        globalPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(globalPanel, gbc);
        globalPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20), null));
        rightPanel = new JPanel();
        rightPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.gridheight = 2;
        gbc.anchor = GridBagConstraints.NORTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        globalPanel.add(rightPanel, gbc);
        destinationDirections = new JTextField();
        destinationDirections.setColumns(32);
        destinationDirections.setEditable(false);
        destinationDirections.setName("directionsField");
        destinationDirections.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 12;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rightPanel.add(destinationDirections, gbc);
        destinationAddress = new JTextField();
        destinationAddress.setColumns(32);
        destinationAddress.setEditable(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 11;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rightPanel.add(destinationAddress, gbc);
        destinationName = new JTextField();
        destinationName.setColumns(32);
        destinationName.setEditable(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 10;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rightPanel.add(destinationName, gbc);
        destinationLabel.setText("Destination");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 9;
        gbc.anchor = GridBagConstraints.WEST;
        rightPanel.add(destinationLabel, gbc);
        homeDirections = new JTextField();
        homeDirections.setColumns(32);
        homeDirections.setEditable(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rightPanel.add(homeDirections, gbc);
        homeAddress = new JTextField();
        homeAddress.setColumns(32);
        homeAddress.setEditable(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rightPanel.add(homeAddress, gbc);
        homeCampLabel.setText("Home Camp");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.WEST;
        rightPanel.add(homeCampLabel, gbc);
        bathroomAddress = new JTextField();
        bathroomAddress.setColumns(32);
        bathroomAddress.setEditable(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rightPanel.add(bathroomAddress, gbc);
        bathroomDirections = new JTextField();
        bathroomDirections.setColumns(32);
        bathroomDirections.setEditable(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rightPanel.add(bathroomDirections, gbc);
        nearestBathroomLabel.setText("Nearest Bathroom");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        rightPanel.add(nearestBathroomLabel, gbc);
        currentAddress = new JTextField();
        currentAddress.setColumns(32);
        currentAddress.setEditable(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rightPanel.add(currentAddress, gbc);
        addressLabel.setText("Current Address");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        rightPanel.add(addressLabel, gbc);
        currentCoordinates = new JTextField();
        currentCoordinates.setEditable(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rightPanel.add(currentCoordinates, gbc);
        leftMenuPanel.setLayout(new GridBagLayout());
        leftMenuPanel.setInheritsPopupMenu(false);
        leftMenuPanel.setMinimumSize(new Dimension(-1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.NORTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 10;
        globalPanel.add(leftMenuPanel, gbc);
        leftMenuPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 0, 0, 20), null));
        leftMenu.setMinimumSize(new Dimension(400, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.NORTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        leftMenuPanel.add(leftMenu, gbc);
        clockPanel.setLayout(new GridBagLayout());
        clockPanel.setBackground(new Color(-12828863));
        clockPanel.setEnabled(true);
        clockPanel.setName("clockPanel");
        clockPanel.setOpaque(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.SOUTH;
        globalPanel.add(clockPanel, gbc);
        clockLabel.setText("clock");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.SOUTHWEST;
        clockPanel.add(clockLabel, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 3;
        gbc.fill = GridBagConstraints.BOTH;
        globalPanel.add(panel2, gbc);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 0, 30, 0), null));
        header = new JLabel();
        header.setIcon(new ImageIcon(getClass().getResource("/logo.png")));
        header.setText("Burning Man Navigation");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel2.add(header, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
